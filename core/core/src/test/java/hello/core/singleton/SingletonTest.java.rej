diff a/core/core/src/test/java/hello/core/singleton/SingletonTest.java b/core/core/src/test/java/hello/core/singleton/SingletonTest.java	(rejected hunks)
@@ -24,9 +24,44 @@
         //참조값이 다른 것을 확인
         System.out.println("memberService1 = "+memberService1);
         System.out.println("memberService2 = " +memberService2);
-        
+
         assertThat(memberService1).isNotSameAs(memberService2);
 
     }
+    @Test
+    @DisplayName("싱글톤 패턴을 적용한 객체 사용")
+    void singletonServiceTest(){
+        //new SingletonService();
+        //참조값이 같은지, 같은 인스턴스(객체)를 가지고 있는지 확인한다.
+        SingletonService singletonService1 = SingletonService.getInstance();
+        SingletonService singletonService2 = SingletonService.getInstance();
+
+        System.out.println("singletonService1 ="+singletonService1);
+        System.out.println("singletonService2 =" +singletonService2);
+
+        assertThat(singletonService1).isSameAs(singletonService2);
+        singletonService1.logic();
+
+    }
+
+    @Test
+    @DisplayName("스프링 컨테이너와 싱글톤")
+    void springContainer(){
+        ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
+
+        //1.조회 호출할 때 마다 같은 객체를 반환
+        MemberService memberService1 = ac.getBean("memberService",MemberService.class);
+
+        //2.조회 호출할 때 마다 같은 객체를 반환
+        MemberService memberService2 = ac.getBean("memberService",MemberService.class);
+
+        //참조값이 같은 것을 확인
+        System.out.println("memberService1 ="+memberService1);
+        System.out.println("memberService2 =" +memberService2);
+
+        //memberService1 == memberService2
+        assertThat(memberService1).isSameAs(memberService2);
+    }
+
 
 }
